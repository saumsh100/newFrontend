"""The account Viewer"""
type AccountViewer implements Node {
  """The ID of an object"""
  id: ID!
  userId: String
  role: String
  permissionId: String
  enterpriseId: String
  accountId: String
  patient(
    id: String

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Patient
  patients(
    after: String
    first: Int
    before: String
    last: Int
    limit: Int
    order: [[String]]

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): PatientConnection
  families: [Family]
  family(id: String!): Family
  patientSearches(
    after: String
    first: Int
    before: String
    last: Int
    limit: Int
    order: String

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): PatientSearchesConnection
  waitSpots(
    after: String
    first: Int
    before: String
    last: Int
    limit: Int
    order: [[String]]

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): WaitSpotConnection
}

input addFamilyInput {
  accountId: String!
  pmsId: String
  headId: String
  pmsCreatedAt: String
  clientMutationId: String
}

type addFamilyPayload {
  family: Family
  clientMutationId: String
}

input addPatientInput {
  accountId: String!
  pmsId: String
  patientUserId: String
  email: String
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumber: String
  homePhoneNumber: String
  mobilePhoneNumber: String
  workPhoneNumber: String
  otherPhoneNumber: String
  prefContactPhone: String
  gender: String
  prefName: String
  language: String
  address: SequelizeJSON
  preferences: SequelizeJSON
  type: String
  contactMethodNote: String
  birthDate: String
  pmsCreatedAt: String
  insurance: SequelizeJSON
  isDeleted: Boolean
  isSyncedWithPms: Boolean
  isSyncedWithPMS: Boolean
  familyId: String
  lastApptId: String
  lastApptDate: String
  lastHygieneDate: String
  lastHygieneApptId: String
  lastRecallDate: String
  lastRecallApptId: String
  dueForRecallExamDate: String
  recallPendingAppointmentId: String
  dueForHygieneDate: String
  hygienePendingAppointmentId: String
  lastRestorativeDate: String
  lastRestorativeApptId: String
  firstApptId: String
  firstApptDate: String
  nextApptId: String
  nextApptDate: String
  insuranceInterval: String
  contCareInterval: String
  avatarUrl: String
  omitReminderIds: [String]!
  omitRecallIds: [String]!
  clientMutationId: String
}

type addPatientPayload {
  patient: Patient
  clientMutationId: String
}

input addPatientSearchesInput {
  userId: String!
  accountId: String!
  patientId: String!
  clientMutationId: String
}

type addPatientSearchesPayload {
  patientSearch: PatientSearches
  clientMutationId: String
}

input addWaitSpotInput {
  accountId: String!
  patientId: String
  patientUserId: String
  preferences: SequelizeJSON
  daysOfTheWeek: SequelizeJSON
  unavailableDays: [String]
  availableTimes: [String]
  endDate: String
  appointmentId: String
  reasonId: String
  practitionerId: String
  clientMutationId: String
}

type addWaitSpotPayload {
  waitSpot: WaitSpot
  clientMutationId: String
}

input createFamilyWithMembersInput {
  members: [String]!
  clientMutationId: String
}

type createFamilyWithMembersPayload {
  family: Family
  clientMutationId: String
}

input deleteFamilyInput {
  id: String!
  clientMutationId: String
}

type deleteFamilyPayload {
  clientMutationId: String
}

input deleteMultipleWaitSpotsInput {
  ids: [String]
  clientMutationId: String
}

type deleteMultipleWaitSpotsPayload {
  waitSpots: [WaitSpot]
  clientMutationId: String
}

input deletePatientInput {
  id: String!
  clientMutationId: String
}

type deletePatientPayload {
  clientMutationId: String
}

input deleteWaitSpotInput {
  id: String!
  clientMutationId: String
}

type deleteWaitSpotPayload {
  waitSpot: WaitSpot
  clientMutationId: String
}

"""Details of a family"""
type Family implements Node {
  """The ID of an object"""
  id: ID!
  accountId: String!
  pmsId: String
  headId: String
  pmsCreatedAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  ccId: String
  head: Patient
  members(
    after: String
    first: Int
    before: String
    last: Int
    limit: Int
    order: String

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): PatientConnection
}

type Mutation {
  addPatientMutation(input: addPatientInput!): addPatientPayload
  updatePatientMutation(input: updatePatientInput!): updatePatientPayload
  deletePatientMutation(input: deletePatientInput!): deletePatientPayload
  addFamilyMutation(input: addFamilyInput!): addFamilyPayload
  updateFamilyMutation(input: updateFamilyInput!): updateFamilyPayload
  deleteFamilyMutation(input: deleteFamilyInput!): deleteFamilyPayload
  createFamilyWithMembersMutation(input: createFamilyWithMembersInput!): createFamilyWithMembersPayload
  addPatientSearchesMutation(input: addPatientSearchesInput!): addPatientSearchesPayload
  addWaitSpotMutation(input: addWaitSpotInput!): addWaitSpotPayload
  deleteWaitSpotMutation(input: deleteWaitSpotInput!): deleteWaitSpotPayload
  deleteMultipleWaitSpotsMutation(input: deleteMultipleWaitSpotsInput!): deleteMultipleWaitSpotsPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Details of a patient"""
type Patient implements Node {
  """The ID of an object"""
  id: ID!
  accountId: String!
  pmsId: String
  patientUserId: String
  email: String
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumber: String
  homePhoneNumber: String
  mobilePhoneNumber: String
  workPhoneNumber: String
  otherPhoneNumber: String
  prefContactPhone: String
  gender: String
  prefName: String
  language: String
  address: SequelizeJSON
  preferences: SequelizeJSON
  type: String
  contactMethodNote: String
  birthDate: String
  pmsCreatedAt: String
  insurance: SequelizeJSON
  isDeleted: Boolean
  isSyncedWithPms: Boolean
  isSyncedWithPMS: Boolean
  familyId: String
  status: PatientstatusEnumType
  lastApptId: String
  lastApptDate: String
  lastHygieneDate: String
  lastHygieneApptId: String
  lastRecallDate: String
  lastRecallApptId: String
  dueForRecallExamDate: String
  recallPendingAppointmentId: String
  dueForHygieneDate: String
  hygienePendingAppointmentId: String
  lastRestorativeDate: String
  lastRestorativeApptId: String
  firstApptId: String
  firstApptDate: String
  nextApptId: String
  nextApptDate: String
  insuranceInterval: String
  contCareInterval: String
  avatarUrl: String
  omitReminderIds: [String]!
  omitRecallIds: [String]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  ccId: String
  family: Family
}

"""A connection to a list of items."""
type PatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientEdge]

  """Total number of patients"""
  totalCount: Int
}

"""An edge in a connection."""
type PatientEdge {
  """The item at the end of the edge"""
  node: Patient

  """A cursor for use in pagination"""
  cursor: String!
}

"""Patient recent search"""
type PatientSearches implements Node {
  """The ID of an object"""
  id: ID!
  userId: String!
  accountId: String!
  patientId: String!
  createdAt: String!
  updatedAt: String!
  ccId: String
  patient: Patient
}

"""A connection to a list of items."""
type PatientSearchesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientSearchesEdge]
}

"""An edge in a connection."""
type PatientSearchesEdge {
  """The item at the end of the edge"""
  node: PatientSearches

  """A cursor for use in pagination"""
  cursor: String!
}

enum PatientstatusEnumType {
  Active
  Inactive
}

"""Details of a patient user"""
type PatientUser implements Node {
  """The ID of an object"""
  id: ID!
  patientUserFamilyId: String
  email: String
  password: String
  phoneNumber: String
  firstName: String!
  lastName: String!
  gender: String
  birthDate: String
  isEmailConfirmed: Boolean!
  isPhoneNumberConfirmed: Boolean!
  avatarUrl: String
  insuranceCarrier: String
  insuranceMemberId: String
  insuranceGroupId: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  ccId: String
  family: Family
}

type Query {
  accountViewer: AccountViewer

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""The `JSON` scalar type represents raw JSON as values."""
scalar SequelizeJSON

type Subscription {
  """New wait spot created notification."""
  newWaitSpot(accountId: String!): WaitSpot

  """Wait spot removed."""
  removeWaitSpot(accountId: String!): WaitSpot
}

input updateFamilyInput {
  id: String!
  accountId: String!
  pmsId: String
  headId: String
  pmsCreatedAt: String
  clientMutationId: String
}

type updateFamilyPayload {
  family: Family
  clientMutationId: String
}

input updatePatientInput {
  id: String!
  accountId: String!
  pmsId: String
  patientUserId: String
  email: String
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumber: String
  homePhoneNumber: String
  mobilePhoneNumber: String
  workPhoneNumber: String
  otherPhoneNumber: String
  prefContactPhone: String
  gender: String
  prefName: String
  language: String
  address: SequelizeJSON
  preferences: SequelizeJSON
  type: String
  contactMethodNote: String
  birthDate: String
  pmsCreatedAt: String
  insurance: SequelizeJSON
  isDeleted: Boolean
  isSyncedWithPms: Boolean
  isSyncedWithPMS: Boolean
  familyId: String
  lastApptId: String
  lastApptDate: String
  lastHygieneDate: String
  lastHygieneApptId: String
  lastRecallDate: String
  lastRecallApptId: String
  dueForRecallExamDate: String
  recallPendingAppointmentId: String
  dueForHygieneDate: String
  hygienePendingAppointmentId: String
  lastRestorativeDate: String
  lastRestorativeApptId: String
  firstApptId: String
  firstApptDate: String
  nextApptId: String
  nextApptDate: String
  insuranceInterval: String
  contCareInterval: String
  avatarUrl: String
  omitReminderIds: [String]!
  omitRecallIds: [String]!
  clientMutationId: String
}

type updatePatientPayload {
  patient: Patient
  clientMutationId: String
}

"""Waitspot details"""
type WaitSpot implements Node {
  """The ID of an object"""
  id: ID!
  accountId: String!
  patientId: String
  patientUserId: String
  preferences: SequelizeJSON
  daysOfTheWeek: SequelizeJSON
  unavailableDays: [String]
  availableTimes: [String]
  endDate: String
  appointmentId: String
  reasonId: String
  practitionerId: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  ccId: String
  patient: Patient
  patientUser: PatientUser
}

"""A connection to a list of items."""
type WaitSpotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WaitSpotEdge]

  """Total number of wait spots"""
  totalCount: Int
}

"""An edge in a connection."""
type WaitSpotEdge {
  """The item at the end of the edge"""
  node: WaitSpot

  """A cursor for use in pagination"""
  cursor: String!
}
