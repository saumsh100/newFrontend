
@import '../../../styles/ui.scss';

$error-color: $danger-color;
$active-color: $primary-dark;
$empty-grey: darken(lightgrey, 5%);

.group {
  padding: 20px 0;
  position: relative;
}

.input {
  background-color: transparent;
  border: none;
  border-bottom: 1px solid $empty-grey;
  box-sizing: border-box;
  display: block;
  font-family: $dashboard-font;
  font-size: $medium-size;
  height: 30px;
  width: 100%;
  &::placeholder{
    color: $inactive-color;
    font-style: italic;
    font-weight: 200
  }
  &:focus {
    outline: none;
  }

  &:focus ~ .label {
    color: $active-color;
    // Bring the label above the input when focused / filled in
    @extend .filled;
  }
}
.inputWrapper{
  position: relative;
}
.icon {
  bottom: 30px;
  opacity: 0.5;
  position: absolute;
  right: 0;
}

.erroredInput {
  border-bottom: 1px solid $error-color;
  &::placeholder {
    color: red !important;
  }
}

// TODO: figure out how to stack the CSS to make sure we dont have to use !important
.filled {
  font-size: 10px !important;
  left: 0 !important;
  top: 10px !important;
}

.hideLabel {
  display: none;
}

.label {
  color: $empty-grey;
  font-size: $medium-size;
  font-weight: normal;
  left: 0;
  pointer-events: none;
  position: absolute;
  top: 26px;
  transition: 0.2s ease all;
}

.primaryColorBorder {
  border-bottom: 1px solid $primary-color;
}

.erroredLabel {
  color: $error-color !important;
}

.erroredIcon {
  color: $error-color !important;
}

.bar {
  display: block;
  position: relative;
  width: 100%;
  &:before,  &:after {
    background: $active-color;
    bottom: 0;
    content: '';
    height: 1px;
    position: absolute;
    transition: 0.2s ease all;
    width: 0;
  }

  &:before {
    left: 50%;
  }

  &:after {
    right: 50%;
  }
}

// Show animation on focus
.input:focus ~ .bar {
  &:before, &:after {
    width: 50%;
  }
}

.error {
  color: $error-color;
  font-size: 11px;
  font-weight: normal;
  left: 0;
  pointer-events: none;
  position: absolute;
  top: 51px;
}


.hidden {
  display: none;
}

